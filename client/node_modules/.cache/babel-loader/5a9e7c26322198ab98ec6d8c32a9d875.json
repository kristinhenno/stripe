{"ast":null,"code":"var _jsxFileName = \"/Users/kristinhenno/Documents/Repositories/stripe/client/src/components/Checkout.js\";\nimport React from \"react\";\nimport withContext from \"./withContext\";\nimport { loadStripe } from '@stripe/stripe-js'; // import styled from \"styled-components\";\n\nconst stripePromise = loadStripe('pk_test_9cWSl1Mlu5mEFLGQajwgixZx00gIx5qQeQ');\n\nconst Checkout = props => {\n  const {\n    cart\n  } = props.context;\n  const itemKeys = Object.keys(cart || {});\n  console.log(itemKeys);\n  console.log(cart[\"Adidas Polo\"]);\n  let checkoutArray = [];\n  var i;\n\n  for (i = 0; i < itemKeys.length; i++) {\n    console.log(cart[itemKeys[i]].product.name);\n    let price = cart[itemKeys[i]].product.price * 100;\n    console.log(price);\n    checkoutArray.push({\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: cart[itemKeys[i]].product.name\n        },\n        unit_amount: price\n      },\n      quantity: cart[itemKeys[i]].quantity\n    });\n    console.log(checkoutArray);\n  }\n\n  const handleClick = async event => {\n    // Get Stripe.js instance\n    const stripe = await stripePromise; // Call your backend to create the Checkout Session\n\n    const response = await fetch('/create-checkout-session', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        data: {\n          payment_method_types: ['card'],\n          line_items: checkoutArray,\n          mode: 'payment',\n          allow_promotion_codes: true\n        }\n      })\n    });\n    console.log(response);\n    const session = await response.json();\n    console.log(session); // When the customer clicks on the button, redirect them to Checkout.\n\n    const result = await stripe.redirectToCheckout({\n      sessionId: session.id\n    });\n\n    if (result.error) {// If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleClick(),\n    role: \"link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, \"Checkout\"));\n};\n\nexport default withContext(Checkout); // class Checkout extends React.Component {\n//   state = {\n//     order: {\n//       payment_method_types: ['card'],\n//       line_items: [\n//         {\n//           price_data: {\n//             currency: 'usd',\n//             product_data: {\n//               name: 'T-shirt',\n//             },\n//             unit_amount: 2000,\n//           },\n//           quantity: 1,\n//         },\n//       ],\n//       mode: 'payment',\n//       allow_promotion_codes: true,\n//     }\n//   };\n// handleClick = async (event) => {\n//   // Get Stripe.js instance\n//   const stripe = await stripePromise;\n//   // Call your backend to create the Checkout Session\n//   const response = await fetch('/create-checkout-session', {\n//     method: 'POST',\n//     headers: {\n//       Accept: 'application/json',\n//       'Content-type': 'application/json'\n//     },\n//     body: JSON.stringify({\n//       data: this.state.order\n//     })\n//   });\n//   console.log(response);\n//   const session = await response.json();\n//   console.log(session);\n//   // When the customer clicks on the button, redirect them to Checkout.\n//   const result = await stripe.redirectToCheckout({\n//     sessionId: session.id,\n//   });\n//   if (result.error) {\n//     // If `redirectToCheckout` fails due to a browser or network\n//     // error, display the localized error message to your customer\n//     // using `result.error.message`.\n//   }\n// }\n//   render() {\n//     return (\n//       <Style>\n//         <button onClick={this.handleClick} role=\"link\">\n//           Checkout\n//     </button>\n//       </Style>\n//     );\n//   }\n// }\n// const Style = styled.section`\n// `;\n// export default Checkout;","map":{"version":3,"sources":["/Users/kristinhenno/Documents/Repositories/stripe/client/src/components/Checkout.js"],"names":["React","withContext","loadStripe","stripePromise","Checkout","props","cart","context","itemKeys","Object","keys","console","log","checkoutArray","i","length","product","name","price","push","price_data","currency","product_data","unit_amount","quantity","handleClick","event","stripe","response","fetch","method","headers","Accept","body","JSON","stringify","data","payment_method_types","line_items","mode","allow_promotion_codes","session","json","result","redirectToCheckout","sessionId","id","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport withContext from \"./withContext\";\nimport { loadStripe } from '@stripe/stripe-js';\n// import styled from \"styled-components\";\nconst stripePromise = loadStripe('pk_test_9cWSl1Mlu5mEFLGQajwgixZx00gIx5qQeQ');\n\n\nconst Checkout = props => {\n  const { cart } = props.context;\n  const itemKeys = Object.keys(cart || {});\n  console.log(itemKeys);\n  console.log(cart[\"Adidas Polo\"]);\n\n  let checkoutArray = [];\n\n  var i;\n  for (i = 0; i < itemKeys.length; i++) {\n\n    console.log(cart[itemKeys[i]].product.name)\n    let price = cart[itemKeys[i]].product.price * 100;\n    console.log(price);\n    checkoutArray.push({\n\n\n\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: cart[itemKeys[i]].product.name,\n        },\n        unit_amount: price,\n      },\n      quantity: cart[itemKeys[i]].quantity,\n    })\n\n    console.log(checkoutArray)\n  }\n\n\n\n  const handleClick = async (event) => {\n    // Get Stripe.js instance\n    const stripe = await stripePromise;\n\n    // Call your backend to create the Checkout Session\n    const response = await fetch('/create-checkout-session', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        data: {\n          payment_method_types: ['card'],\n          line_items: checkoutArray,\n          mode: 'payment',\n          allow_promotion_codes: true,\n        }\n      })\n\n\n\n    });\n\n    console.log(response);\n\n    const session = await response.json();\n\n    console.log(session);\n\n    // When the customer clicks on the button, redirect them to Checkout.\n    const result = await stripe.redirectToCheckout({\n      sessionId: session.id,\n    });\n\n\n    if (result.error) {\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n    }\n\n  }\n\n\n\n\n\n  return (<div>\n    <button onClick={() => handleClick()} role=\"link\">\n      Checkout\n    </button>\n  </div>\n  )\n}\n\nexport default withContext(Checkout);\n\n\n// class Checkout extends React.Component {\n//   state = {\n//     order: {\n//       payment_method_types: ['card'],\n//       line_items: [\n//         {\n//           price_data: {\n//             currency: 'usd',\n//             product_data: {\n//               name: 'T-shirt',\n//             },\n//             unit_amount: 2000,\n//           },\n//           quantity: 1,\n//         },\n//       ],\n//       mode: 'payment',\n//       allow_promotion_codes: true,\n//     }\n//   };\n\n  // handleClick = async (event) => {\n  //   // Get Stripe.js instance\n  //   const stripe = await stripePromise;\n\n  //   // Call your backend to create the Checkout Session\n  //   const response = await fetch('/create-checkout-session', {\n  //     method: 'POST',\n  //     headers: {\n  //       Accept: 'application/json',\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({\n  //       data: this.state.order\n  //     })\n  //   });\n\n\n  //   console.log(response);\n\n  //   const session = await response.json();\n\n  //   console.log(session);\n\n  //   // When the customer clicks on the button, redirect them to Checkout.\n  //   const result = await stripe.redirectToCheckout({\n  //     sessionId: session.id,\n  //   });\n\n\n  //   if (result.error) {\n  //     // If `redirectToCheckout` fails due to a browser or network\n  //     // error, display the localized error message to your customer\n  //     // using `result.error.message`.\n  //   }\n  // }\n\n//   render() {\n\n//     return (\n//       <Style>\n//         <button onClick={this.handleClick} role=\"link\">\n//           Checkout\n//     </button>\n//       </Style>\n//     );\n//   }\n// }\n\n// const Style = styled.section`\n\n// `;\n\n// export default Checkout;\n"]},"metadata":{},"sourceType":"module"}