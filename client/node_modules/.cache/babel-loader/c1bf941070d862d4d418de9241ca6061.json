{"ast":null,"code":"var _jsxFileName = \"/Users/kristinhenno/Documents/Repositories/stripe/client/src/components/Checkout.js\";\nimport React from \"react\";\nimport withContext from \"./withContext\";\nimport CartItem from \"./CartItem\";\nimport { loadStripe } from '@stripe/stripe-js'; // import styled from \"styled-components\";\n\nconst stripePromise = loadStripe('pk_test_9cWSl1Mlu5mEFLGQajwgixZx00gIx5qQeQ');\n\nconst Checkout = props => {\n  const {\n    cart\n  } = props.context;\n  const itemKeys = Object.keys(cart || {});\n  console.log(itemKeys);\n  console.log(cart[\"Adidas Polo\"]);\n  let checkout = [];\n  var i;\n\n  for (i = 0; i < itemKeys.length; i++) {\n    checkout.push({\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: cart[itemKeys[i]]\n        },\n        unit_amount: 2000\n      },\n      quantity: 1\n    });\n    console.log(checkout); // cart[itemKeys[i]])\n  }\n};\n\nconst handleClick = async event => {\n  // Get Stripe.js instance\n  const stripe = await stripePromise; // Call your backend to create the Checkout Session\n\n  const response = await fetch('/create-checkout-session', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: {\n        payment_method_types: ['card'],\n        line_items: [{\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: 'T-shirt'\n            },\n            unit_amount: 2000\n          },\n          quantity: 1\n        }],\n        mode: 'payment',\n        allow_promotion_codes: true\n      }\n    })\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleClick(),\n    role: \"link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"Checkout\"));\n};\n\nexport default withContext(Checkout); // class Checkout extends React.Component {\n//   state = {\n//     order: {\n//       payment_method_types: ['card'],\n//       line_items: [\n//         {\n//           price_data: {\n//             currency: 'usd',\n//             product_data: {\n//               name: 'T-shirt',\n//             },\n//             unit_amount: 2000,\n//           },\n//           quantity: 1,\n//         },\n//       ],\n//       mode: 'payment',\n//       allow_promotion_codes: true,\n//     }\n//   };\n//   handleClick = async (event) => {\n//     // Get Stripe.js instance\n//     const stripe = await stripePromise;\n//     // Call your backend to create the Checkout Session\n//     const response = await fetch('/create-checkout-session', {\n//       method: 'POST',\n//       headers: {\n//         Accept: 'application/json',\n//         'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({\n//         data: this.state.order\n//       })\n//     });\n//     console.log(response);\n//     const session = await response.json();\n//     console.log(session);\n//     // When the customer clicks on the button, redirect them to Checkout.\n//     const result = await stripe.redirectToCheckout({\n//       sessionId: session.id,\n//     });\n//     if (result.error) {\n//       // If `redirectToCheckout` fails due to a browser or network\n//       // error, display the localized error message to your customer\n//       // using `result.error.message`.\n//     }\n//   }\n//   render() {\n//     return (\n//       <Style>\n//         <button onClick={this.handleClick} role=\"link\">\n//           Checkout\n//     </button>\n//       </Style>\n//     );\n//   }\n// }\n// const Style = styled.section`\n// `;\n// export default Checkout;","map":{"version":3,"sources":["/Users/kristinhenno/Documents/Repositories/stripe/client/src/components/Checkout.js"],"names":["React","withContext","CartItem","loadStripe","stripePromise","Checkout","props","cart","context","itemKeys","Object","keys","console","log","checkout","i","length","push","price_data","currency","product_data","name","unit_amount","quantity","handleClick","event","stripe","response","fetch","method","headers","Accept","body","JSON","stringify","data","payment_method_types","line_items","mode","allow_promotion_codes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B,C,CACA;;AACA,MAAMC,aAAa,GAAGD,UAAU,CAAC,4CAAD,CAAhC;;AAMA,MAAME,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAK,CAACE,OAAvB;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,IAAI,EAApB,CAAjB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAAC,aAAD,CAAhB;AAEA,MAAIO,QAAQ,GAAG,EAAf;AAEA,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,QAAQ,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,IAAAA,QAAQ,CAACG,IAAT,CAAc;AAEZC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,KADA;AAEVC,QAAAA,YAAY,EAAE;AACZC,UAAAA,IAAI,EAAEd,IAAI,CAACE,QAAQ,CAACM,CAAD,CAAT;AADE,SAFJ;AAKVO,QAAAA,WAAW,EAAE;AALH,OAFA;AASZC,MAAAA,QAAQ,EAAE;AATE,KAAd;AAWAX,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAZoC,CAapC;AACD;AACF,CAxBD;;AA2BA,MAAMU,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnC;AACA,QAAMC,MAAM,GAAG,MAAMtB,aAArB,CAFmC,CAInC;;AACA,QAAMuB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAAD,EAA6B;AACvDC,IAAAA,MAAM,EAAE,MAD+C;AAEvDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF8C;AAMvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,oBAAoB,EAAE,CAAC,MAAD,CADlB;AAEJC,QAAAA,UAAU,EAAE,CACV;AACEnB,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE,KADA;AAEVC,YAAAA,YAAY,EAAE;AACZC,cAAAA,IAAI,EAAE;AADM,aAFJ;AAKVC,YAAAA,WAAW,EAAE;AALH,WADd;AAQEC,UAAAA,QAAQ,EAAE;AARZ,SADU,CAFR;AAcJe,QAAAA,IAAI,EAAE,SAdF;AAeJC,QAAAA,qBAAqB,EAAE;AAfnB;AADa,KAAf;AANiD,GAA7B,CAA5B;AA4BA,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACN;AAAQ,IAAA,OAAO,EAAEf,WAAW,EAA5B;AAAgC,IAAA,IAAI,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADM,CAAR;AAMD,CAvCD;;AAyCA,eAAevB,WAAW,CAACI,QAAD,CAA1B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA","sourcesContent":["import React from \"react\";\nimport withContext from \"./withContext\";\nimport CartItem from \"./CartItem\";\nimport { loadStripe } from '@stripe/stripe-js';\n// import styled from \"styled-components\";\nconst stripePromise = loadStripe('pk_test_9cWSl1Mlu5mEFLGQajwgixZx00gIx5qQeQ');\n\n\n\n\n\nconst Checkout = props => {\n  const { cart } = props.context;\n  const itemKeys = Object.keys(cart || {});\n  console.log(itemKeys);\n  console.log(cart[\"Adidas Polo\"]);\n\n  let checkout = [];\n\n  var i;\n  for (i = 0; i < itemKeys.length; i++) {\n    checkout.push({\n\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: cart[itemKeys[i]],\n        },\n        unit_amount: 2000,\n      },\n      quantity: 1,\n    })\n    console.log(checkout);\n    // cart[itemKeys[i]])\n  }\n}\n\n\nconst handleClick = async (event) => {\n  // Get Stripe.js instance\n  const stripe = await stripePromise;\n\n  // Call your backend to create the Checkout Session\n  const response = await fetch('/create-checkout-session', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: {\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price_data: {\n              currency: 'usd',\n              product_data: {\n                name: 'T-shirt',\n              },\n              unit_amount: 2000,\n            },\n            quantity: 1,\n          },\n        ],\n        mode: 'payment',\n        allow_promotion_codes: true,\n      }\n    })\n  });\n\n\n  return (<div>\n    <button onClick={handleClick()} role=\"link\">\n      Checkout\n    </button>\n  </div>\n  )\n}\n\nexport default withContext(Checkout);\n\n\n// class Checkout extends React.Component {\n//   state = {\n//     order: {\n//       payment_method_types: ['card'],\n//       line_items: [\n//         {\n//           price_data: {\n//             currency: 'usd',\n//             product_data: {\n//               name: 'T-shirt',\n//             },\n//             unit_amount: 2000,\n//           },\n//           quantity: 1,\n//         },\n//       ],\n//       mode: 'payment',\n//       allow_promotion_codes: true,\n//     }\n//   };\n\n//   handleClick = async (event) => {\n//     // Get Stripe.js instance\n//     const stripe = await stripePromise;\n\n//     // Call your backend to create the Checkout Session\n//     const response = await fetch('/create-checkout-session', {\n//       method: 'POST',\n//       headers: {\n//         Accept: 'application/json',\n//         'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({\n//         data: this.state.order\n//       })\n//     });\n\n\n//     console.log(response);\n\n//     const session = await response.json();\n\n//     console.log(session);\n\n//     // When the customer clicks on the button, redirect them to Checkout.\n//     const result = await stripe.redirectToCheckout({\n//       sessionId: session.id,\n//     });\n\n\n//     if (result.error) {\n//       // If `redirectToCheckout` fails due to a browser or network\n//       // error, display the localized error message to your customer\n//       // using `result.error.message`.\n//     }\n//   }\n\n//   render() {\n\n//     return (\n//       <Style>\n//         <button onClick={this.handleClick} role=\"link\">\n//           Checkout\n//     </button>\n//       </Style>\n//     );\n//   }\n// }\n\n// const Style = styled.section`\n\n// `;\n\n// export default Checkout;\n"]},"metadata":{},"sourceType":"module"}